# Generated from Lang.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,255,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,
        1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,
        1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,5,21,146,8,21,10,21,
        12,21,149,9,21,1,22,4,22,152,8,22,11,22,12,22,153,1,23,4,23,157,
        8,23,11,23,12,23,158,1,23,1,23,5,23,163,8,23,10,23,12,23,166,9,23,
        1,23,1,23,4,23,170,8,23,11,23,12,23,171,3,23,174,8,23,1,24,1,24,
        5,24,178,8,24,10,24,12,24,181,9,24,1,24,1,24,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,3,25,194,8,25,1,26,1,26,1,26,1,26,1,26,
        1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
        1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
        1,35,1,35,1,36,1,36,1,37,1,37,1,38,4,38,234,8,38,11,38,12,38,235,
        1,38,1,38,1,39,1,39,1,40,1,40,5,40,244,8,40,10,40,12,40,247,9,40,
        1,41,1,41,5,41,251,8,41,10,41,12,41,254,9,41,0,0,42,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,1,0,7,2,0,10,10,13,13,1,0,48,57,3,
        0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,1,0,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,65,90,265,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,
        3,87,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,95,1,0,0,
        0,13,97,1,0,0,0,15,100,1,0,0,0,17,103,1,0,0,0,19,106,1,0,0,0,21,
        108,1,0,0,0,23,111,1,0,0,0,25,113,1,0,0,0,27,116,1,0,0,0,29,119,
        1,0,0,0,31,122,1,0,0,0,33,125,1,0,0,0,35,128,1,0,0,0,37,131,1,0,
        0,0,39,134,1,0,0,0,41,137,1,0,0,0,43,143,1,0,0,0,45,151,1,0,0,0,
        47,173,1,0,0,0,49,175,1,0,0,0,51,193,1,0,0,0,53,195,1,0,0,0,55,201,
        1,0,0,0,57,205,1,0,0,0,59,210,1,0,0,0,61,213,1,0,0,0,63,218,1,0,
        0,0,65,220,1,0,0,0,67,222,1,0,0,0,69,224,1,0,0,0,71,226,1,0,0,0,
        73,228,1,0,0,0,75,230,1,0,0,0,77,233,1,0,0,0,79,239,1,0,0,0,81,241,
        1,0,0,0,83,248,1,0,0,0,85,86,5,33,0,0,86,2,1,0,0,0,87,88,5,45,0,
        0,88,4,1,0,0,0,89,90,5,43,0,0,90,6,1,0,0,0,91,92,5,42,0,0,92,8,1,
        0,0,0,93,94,5,47,0,0,94,10,1,0,0,0,95,96,5,37,0,0,96,12,1,0,0,0,
        97,98,5,42,0,0,98,99,5,42,0,0,99,14,1,0,0,0,100,101,5,61,0,0,101,
        102,5,61,0,0,102,16,1,0,0,0,103,104,5,33,0,0,104,105,5,61,0,0,105,
        18,1,0,0,0,106,107,5,60,0,0,107,20,1,0,0,0,108,109,5,60,0,0,109,
        110,5,61,0,0,110,22,1,0,0,0,111,112,5,62,0,0,112,24,1,0,0,0,113,
        114,5,62,0,0,114,115,5,61,0,0,115,26,1,0,0,0,116,117,5,38,0,0,117,
        118,5,38,0,0,118,28,1,0,0,0,119,120,5,124,0,0,120,121,5,124,0,0,
        121,30,1,0,0,0,122,123,5,43,0,0,123,124,5,61,0,0,124,32,1,0,0,0,
        125,126,5,45,0,0,126,127,5,61,0,0,127,34,1,0,0,0,128,129,5,42,0,
        0,129,130,5,61,0,0,130,36,1,0,0,0,131,132,5,47,0,0,132,133,5,61,
        0,0,133,38,1,0,0,0,134,135,5,37,0,0,135,136,5,61,0,0,136,40,1,0,
        0,0,137,138,5,98,0,0,138,139,5,114,0,0,139,140,5,101,0,0,140,141,
        5,97,0,0,141,142,5,107,0,0,142,42,1,0,0,0,143,147,5,35,0,0,144,146,
        8,0,0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,
        1,0,0,0,148,44,1,0,0,0,149,147,1,0,0,0,150,152,7,1,0,0,151,150,1,
        0,0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,46,1,0,
        0,0,155,157,7,1,0,0,156,155,1,0,0,0,157,158,1,0,0,0,158,156,1,0,
        0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,164,5,46,0,0,161,163,7,1,
        0,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,
        0,0,165,174,1,0,0,0,166,164,1,0,0,0,167,169,5,46,0,0,168,170,7,1,
        0,0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,
        0,0,172,174,1,0,0,0,173,156,1,0,0,0,173,167,1,0,0,0,174,48,1,0,0,
        0,175,179,5,34,0,0,176,178,8,2,0,0,177,176,1,0,0,0,178,181,1,0,0,
        0,179,177,1,0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,
        0,182,183,5,34,0,0,183,50,1,0,0,0,184,185,5,116,0,0,185,186,5,114,
        0,0,186,187,5,117,0,0,187,194,5,101,0,0,188,189,5,102,0,0,189,190,
        5,97,0,0,190,191,5,108,0,0,191,192,5,115,0,0,192,194,5,101,0,0,193,
        184,1,0,0,0,193,188,1,0,0,0,194,52,1,0,0,0,195,196,5,119,0,0,196,
        197,5,104,0,0,197,198,5,105,0,0,198,199,5,108,0,0,199,200,5,101,
        0,0,200,54,1,0,0,0,201,202,5,108,0,0,202,203,5,101,0,0,203,204,5,
        116,0,0,204,56,1,0,0,0,205,206,5,108,0,0,206,207,5,111,0,0,207,208,
        5,111,0,0,208,209,5,112,0,0,209,58,1,0,0,0,210,211,5,105,0,0,211,
        212,5,102,0,0,212,60,1,0,0,0,213,214,5,101,0,0,214,215,5,108,0,0,
        215,216,5,115,0,0,216,217,5,101,0,0,217,62,1,0,0,0,218,219,5,123,
        0,0,219,64,1,0,0,0,220,221,5,125,0,0,221,66,1,0,0,0,222,223,5,40,
        0,0,223,68,1,0,0,0,224,225,5,41,0,0,225,70,1,0,0,0,226,227,5,59,
        0,0,227,72,1,0,0,0,228,229,5,44,0,0,229,74,1,0,0,0,230,231,5,58,
        0,0,231,76,1,0,0,0,232,234,7,3,0,0,233,232,1,0,0,0,234,235,1,0,0,
        0,235,233,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,6,38,0,
        0,238,78,1,0,0,0,239,240,5,61,0,0,240,80,1,0,0,0,241,245,7,4,0,0,
        242,244,7,5,0,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,
        245,246,1,0,0,0,246,82,1,0,0,0,247,245,1,0,0,0,248,252,7,6,0,0,249,
        251,7,5,0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,
        253,1,0,0,0,253,84,1,0,0,0,254,252,1,0,0,0,12,0,147,153,158,164,
        171,173,179,193,235,245,252,1,6,0,0
    ]

class LangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    Comment = 22
    INTEGER = 23
    FLOAT = 24
    STRING = 25
    BOOLEAN = 26
    WHILE = 27
    LET = 28
    LOOP = 29
    IF = 30
    ELSE = 31
    LBRACE = 32
    RBRACE = 33
    LPAREN = 34
    RPAREN = 35
    SEMICOLON = 36
    COMMA = 37
    COLON = 38
    WS = 39
    EQUAL = 40
    IDENTIFIER_LOWERCASE_START = 41
    IDENTIFIER_CAPITAL_START = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'!'", "'-'", "'+'", "'*'", "'/'", "'%'", "'**'", "'=='", "'!='", 
            "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'+='", "'-='", 
            "'*='", "'/='", "'%='", "'break'", "'while'", "'let'", "'loop'", 
            "'if'", "'else'", "'{'", "'}'", "'('", "')'", "';'", "','", 
            "':'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "Comment", "INTEGER", "FLOAT", "STRING", "BOOLEAN", "WHILE", 
            "LET", "LOOP", "IF", "ELSE", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
            "SEMICOLON", "COMMA", "COLON", "WS", "EQUAL", "IDENTIFIER_LOWERCASE_START", 
            "IDENTIFIER_CAPITAL_START" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "Comment", "INTEGER", "FLOAT", "STRING", "BOOLEAN", 
                  "WHILE", "LET", "LOOP", "IF", "ELSE", "LBRACE", "RBRACE", 
                  "LPAREN", "RPAREN", "SEMICOLON", "COMMA", "COLON", "WS", 
                  "EQUAL", "IDENTIFIER_LOWERCASE_START", "IDENTIFIER_CAPITAL_START" ]

    grammarFileName = "Lang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


